# Generated by Django 4.1.2 on 2023-01-10 09:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gSheetLink', models.CharField(blank=True, max_length=500, null=True)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Schedule',
            },
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('course', models.CharField(max_length=255)),
                ('year', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('shop', models.IntegerField()),
                ('subject', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='TransStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.IntegerField()),
                ('TransName', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'TransStatus',
            },
        ),
        migrations.CreateModel(
            name='registration',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('studID', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('course', models.CharField(blank=True, max_length=255, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('section', models.CharField(blank=True, max_length=255, null=True)),
                ('userType', models.CharField(choices=[('Student', 'Student'), ('Department Head', 'Department Head'), ('Person-in-charge', 'Person-in-charge'), ('Teacher', 'Teacher')], max_length=255, null=True, verbose_name='userType')),
                ('department', models.CharField(choices=[('Department of Industrial Technology', 'Department of Industrial Technology'), ('Department of Industrial Education', 'Department of Industrial Education'), ('Department of Engineering', 'Department of Engineering'), ('Department of Math and Science', 'Department of Math and Science'), ('Department of Liberal Arts', 'Department of Liberal Arts')], max_length=255, null=True, verbose_name='department')),
                ('upload', models.FileField(blank=True, null=True, upload_to='grades/')),
                ('plot_sheet_link', models.FileField(blank=True, null=True, upload_to='plot/')),
                ('addStatus', models.CharField(blank=True, max_length=255)),
                ('addDate', models.DateTimeField(blank=True, null=True)),
                ('dropStatus', models.CharField(blank=True, max_length=255)),
                ('transferStatus', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'registration',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TransferringReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(blank=True, max_length=255, null=True)),
                ('sched', models.CharField(blank=True, max_length=255, null=True)),
                ('req_date', models.DateTimeField(blank=True, null=True)),
                ('head_is_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('head_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('head_name', models.CharField(blank=True, max_length=255, null=True)),
                ('head_date', models.DateTimeField(blank=True, null=True)),
                ('admin_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_name', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_date', models.DateTimeField(blank=True, null=True)),
                ('reg_action', models.CharField(blank=True, max_length=255, null=True)),
                ('enlist_by', models.CharField(blank=True, max_length=255, null=True)),
                ('reg_date', models.DateTimeField(blank=True, null=True)),
                ('reason', models.CharField(blank=True, max_length=500, null=True)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
                ('studID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TupAssistApp.subjects')),
            ],
            options={
                'verbose_name_plural': 'TransferringReq',
            },
        ),
        migrations.CreateModel(
            name='DroppingReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(blank=True, max_length=255, null=True)),
                ('sched', models.CharField(blank=True, max_length=255, null=True)),
                ('req_date', models.DateTimeField(blank=True, null=True)),
                ('subj_teacher_approve', models.CharField(blank=True, default='Pending', max_length=255, null=True)),
                ('subj_teacher_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('subj_teacher_name', models.CharField(blank=True, max_length=255, null=True)),
                ('subj_teacher_date', models.DateTimeField(blank=True, null=True)),
                ('head_is_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('head_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('head_name', models.CharField(blank=True, max_length=255, null=True)),
                ('head_date', models.DateTimeField(blank=True, null=True)),
                ('admin_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_name', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_date', models.DateTimeField(blank=True, null=True)),
                ('reg_action', models.CharField(blank=True, max_length=255, null=True)),
                ('enlist_by', models.CharField(blank=True, max_length=255, null=True)),
                ('reg_date', models.DateTimeField(blank=True, null=True)),
                ('reason', models.CharField(blank=True, max_length=500, null=True)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
                ('studID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TupAssistApp.subjects')),
            ],
            options={
                'verbose_name_plural': 'DroppingReq',
            },
        ),
        migrations.CreateModel(
            name='AddingReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(blank=True, max_length=255, null=True)),
                ('sched', models.CharField(blank=True, max_length=255, null=True)),
                ('req_date', models.DateTimeField(blank=True, null=True)),
                ('pic_is_approve', models.CharField(blank=True, default='Pending', max_length=255, null=True)),
                ('pic_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('pic_name', models.CharField(blank=True, max_length=255, null=True)),
                ('pic_date', models.DateTimeField(blank=True, null=True)),
                ('head_is_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('head_remark', models.CharField(blank=True, max_length=255, null=True)),
                ('head_name', models.CharField(blank=True, max_length=255, null=True)),
                ('head_date', models.DateTimeField(blank=True, null=True)),
                ('admin_approve', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_name', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_date', models.DateTimeField(blank=True, null=True)),
                ('reg_action', models.CharField(blank=True, max_length=255, null=True)),
                ('enroll_by', models.CharField(blank=True, max_length=255, null=True)),
                ('reg_date', models.DateTimeField(blank=True, null=True)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
                ('studID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TupAssistApp.subjects')),
            ],
            options={
                'verbose_name_plural': 'AddingReq',
            },
        ),
    ]
