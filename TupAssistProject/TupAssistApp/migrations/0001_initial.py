# Generated by Django 4.0.2 on 2022-11-21 14:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AddingReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studID', models.IntegerField()),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('section', models.CharField(blank=True, max_length=255, null=True)),
                ('sched', models.CharField(blank=True, max_length=255, null=True)),
                ('picCheck', models.BooleanField(default=False)),
                ('picComment', models.CharField(blank=True, max_length=255, null=True)),
                ('headCheck', models.BooleanField(default=False)),
                ('headComment', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'AddingReq',
            },
        ),
        migrations.CreateModel(
            name='DroppingReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studID', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'DroppingReq',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gSheetLink', models.CharField(blank=True, max_length=500, null=True)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.IntegerField(blank=True, null=True)),
                ('course_year_and_section', models.CharField(blank=True, max_length=255, null=True)),
                ('slots', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Schedule',
            },
        ),
        migrations.CreateModel(
            name='StudentReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('course_year_and_section', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'StudentReference',
            },
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program', models.CharField(max_length=255)),
                ('school_year', models.IntegerField(blank=True, null=True)),
                ('semester', models.CharField(max_length=255)),
                ('subject_code', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='TransferringReq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studID', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'TransferringReq',
            },
        ),
        migrations.CreateModel(
            name='TransStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TransName', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'TransStatus',
            },
        ),
        migrations.CreateModel(
            name='registration',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('studID', models.IntegerField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('course', models.CharField(blank=True, choices=[('BGT-AT', 'Bachelor in Graphics Technology major in Architecture Technology'), ('BET-ET', 'Bachelor of Engineering Technology major in Electrical Technology'), ('BET-ESET', 'Bachelor of Engineering Technology major in Electronics Technology Track: Industrial Automation Technology'), ('BET-COET', 'Bachelor of Engineering Technology major in Computer Engineering Technology'), ('BET-CT', 'Bachelor of Engineering Technology major in Contruction Technology'), ('BET-CT', 'Bachelor of Engineering Technology major in Civil Technology'), ('BET-MT', 'Bachelor of Engineering Technology major in Mechanical Technology'), ('BET-AT', 'Bachelor of Engineering Technology major in Mechanical Engineering Technology Track: Automotive Technology'), ('BET-PPT', 'Bachelor of Engineering Technology major in Mechanical Engineering Technology Track: Power Plant Technology'), ('BSIE-HE', 'Bachelor of Science in Industrial Education major in: Home Economics'), ('BSIE-IA', 'Bachelor of Science in Industrial Education major in: Industrial Arts'), ('BSIE-ICT', 'Bachelor of Science in Industrial Education major in: Information and Communication Technology'), ('BTTE-CP', 'Bachelor of Technical Vocational Teacher Education major in: Computer Programming'), ('BTTE-EL', 'Bachelor of Technical Vocational Teacher Education major in: Electrical'), ('BSCE', 'Bachelor of Science in Civil Engineering'), ('BSEE', 'Bachelor of Science in Electrical Engineering'), ('BSME', 'Bachelor of Science in Mechanical Engineering')], max_length=255, null=True)),
                ('yrandsec', models.CharField(blank=True, choices=[('1A', '1A'), ('2A', '2A'), ('3A', '3A'), ('4A', '4A'), ('1B', '1B'), ('2B', '2B'), ('3B', '3B'), ('4B', '4B')], max_length=255, null=True)),
                ('userType', models.CharField(choices=[('DH', 'Department Head'), ('Person-in-charge', 'Person-in-charge')], max_length=255, null=True, verbose_name='userType')),
                ('department', models.CharField(choices=[('Department of Industrial Technology', 'Department of Industrial Technology'), ('Department of Industrial Education', 'Department of Industrial Education'), ('Department of Engineering', 'Department of Engineering')], max_length=255, null=True, verbose_name='department')),
                ('upload', models.FileField(blank=True, null=True, upload_to='grades/')),
                ('addStatus', models.CharField(blank=True, max_length=255)),
                ('dropStatus', models.CharField(blank=True, max_length=255)),
                ('transferStatus', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'registration',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
